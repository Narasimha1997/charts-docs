<%
=begin
apps: discourse
platforms: kubernetes, tanzu-application-catalog
id: use_external_database
title: Use an external database for Discourse
category: configuration
weight: 20
highlight: 20
=end %>

Sometimes you may want to have Discourse connect to an external database rather than installing one inside your cluster, e.g. to use a managed database service, or use run a single database server for all your applications.

To do this, the chart allows you to specify credentials for an external database under the [*externalDatabase* parameter](https://github.com/bitnami/charts/tree/master/bitnami/discourse#parameters). You should also disable the PostgreSQL installation with the *postgresql.enabled* option. For example with the following parameters:

~~~
postgresql.enabled=false
externalDatabase.host=myexternalhost
externalDatabase.user=myuser
externalDatabase.password=mypassword
externalDatabase.postgresqlPostgresUser=postgres
externalDatabase.postgresqlPostgresPassword=rootpassword
externalDatabase.database=mydatabase
externalDatabase.port=5432
~~~

> NOTE: If you disable PostgreSQL per above you must supply values for the *externalDatabase* connection.

In case the database already contains data from a previous Discourse installation, you need to set the *discourse.skipInstall* parameter to *true*. Otherwise, the container would execute the installation wizard and could modify the existing data in the database. This parameter forces the container to not execute the Discourse installation wizard.

Similarly, you can specify an external Redis(TM) instance rather than installing one inside your cluster. First, you may disable the Redis(TM) installation with the *redis.enabled* option. As described previously, use the parameters below to provide data about your instance:

~~~
redis.enabled=false
externalRedis.host=myexternalhost
externalRedis.password=mypassword
externalRedis.port=5432
~~~
